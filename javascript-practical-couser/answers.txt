VARIABLES Y OPERACIONES

1 Responde las siguientes preguntas en la sección de comentarios:

¿Qué es una variable y para qué sirve?
R: Es un espacio en memoria. Usamos las variables para almacenar valores en tiempo de ejecución.

¿Cuál es la diferencia entre declarar e inicializar una variable?
R: Declarar es crear una variable, en cambio, al inicializar una variable la creamos y asigamos un valor inicial.

¿Cuál es la diferencia entre sumar números y concatenar strings?
R: concatenar es "juntar" dos cadenas de texto, sumar número es una operación que manipula valores.

¿Cuál operador me permite sumar o concatenar?
R: +


2️ Determina el nombre y tipo de dato para almacenar en variables la siguiente información:

Nombre
variable: nombre
tipo: cadena

Apellido
variable: apellido
tipo: cadena

Nombre de usuario en Platzi
variable: nUsuarioPlatzi
tipo: cadena

Edad
variable: edad
tipo: numero

Correo electrónico
variable: correo
tipo: cadena

Mayor de edad
variable: mayorEdad
tipo: boleano

Dinero ahorrado
variable: dineroAhorrado
tipo: numero

Deudas
variable: deudas
tipo: numero


3️ Traduce a código JavaScript las variables del ejemplo anterior y deja tu código en los comentarios.

var nombre = "Eliab";

var apellido  = "Selva";

const nUsuarioPlatzi = "eliab51";

var edad = 24;

const correo = "eliabjselvacruz51@gmail.com";

var mayorEdad = true;

let dineroAhorrado = 0;

let deudas = 100;


4️ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:

Nombre completo (nombre y apellido):

let nombre = "Eliab";
let apellido = "Selva";
console.log("Mi nombre es: "nombre+" "+apellido);


Dinero real (dinero ahorrado menos deudas):

let dineroDisponible = 0;
let dineroAhorrado = 10000;
let deudas = 4000;
dineroDisponible = dineroAhorrado - deudas;
console.log("Dinero disponible: " + dineroDisponible);


FUNCIONES

1️ Responde las siguientes preguntas en la sección de comentarios:

¿Qué es una función?
R: Es una sección de un programa que ejecuta instrucciones de manera independiente al resto del programa.

¿Cuándo me sirve usar una función en mi código?
R: cuando queremos encapsular una funcionalidad de nuestro programa.

¿Cuál es la diferencia entre parámetros y argumentos de una función?
R: Al declarar una función especificamos parámetros que esta recibe. Al llamar una funcion (que recibe parámetros) debemos pasarle argumentos. 


2️ Convierte el siguiente código en una función, pero, cambiando cuando sea necesario las variables constantes por parámetros y argumentos en una función:

const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

Función: 

var miNombre = (name, lastname, nickname) => {
  let completeName = name+" "+lastname;
  console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
}

miNombre("Eliab", "Selva", "eli51");


CONDICIONALES

1️ Responde las siguientes preguntas en la sección de comentarios:

¿Qué es una condicional?
R: Una estructura que nos permite evaluar una condición y cambiar el flujo de nuestro programa.

¿Qué tipos de condicionales existen en JavaScript y cuáles son sus diferencias?
R: If, else if, switch y ternario.

¿Puedo combinar funciones y condicionales?
R: Sí, se pueden emplear condicionales dentro de las funciones o llamar funciones dentro de las condicionales.


2️ Replica el comportamiento del siguiente código que usa la sentencia switch utilizando if, else y else if:

const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un año");
       break;
   case "ExpertPlus":
       console.log("Tú y alguien más pueden tomar TODOS los cursos de Platzi durante un año");
       break;
}

IF ELSE:

const tipoDeSuscripcion = "Basic";

if (tipoDeSuscripcion === "Free"){
  console.log("Solo puedes tomar los cursos gratis.");
} else if(tipoDeSuscripcion === "Basic"){
  console.log("Puedes tomar casi todos los cursos de Platzi durante un mes.");
} else if (tipoDeSuscripcion === "Expert"){
  console.log("Puedes tomar casi todos los cursos de Platzi durante un año.");
} else if (tipoDeSuscripcion === "ExpertPlus"){
  console.log("Tú y alguien más pueden tomar TODOS los cursos de Platzi durante un año");
}

IF:

const tipoDeSuscripcion = "Basic";

if (tipoDeSuscripcion === "Free"){
  console.log("Solo puedes tomar los cursos gratis.");
} 
if(tipoDeSuscripcion === "Basic"){
  console.log("Puedes tomar casi todos los cursos de Platzi durante un mes.");
}
if (tipoDeSuscripcion === "Expert"){
  console.log("Puedes tomar casi todos los cursos de Platzi durante un año.");
}
if (tipoDeSuscripcion === "ExpertPlus"){
  console.log("Tú y alguien más pueden tomar TODOS los cursos de Platzi durante un año");
}


CICLOS

1️ Responde las siguientes preguntas en la sección de comentarios:

¿Qué es un ciclo?
R: Es una estructura que nos permite repetir una serie de instrucciones mientras una condición sea verdadera.

¿Qué tipos de ciclos existen en JavaScript?
R: for, for of, for in, while, do-while.

¿Qué es un ciclo infinito y por qué es un problema?
R: Es un ciclo cuya condicional no cambia y por lo tanto se repite indefinidamente. Este tipo de ciclos causa excepciones de errores en nuestro programa.

¿Puedo mezclar ciclos y condicionales?
R: Sí. Se pueden emplear condicionales dentro de los ciclos y ciclos dentro de condicionales.

2️⃣ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:

for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}

WHILE:

let i = 0;
while(i<5){
  console.log("El valor de i es: " + i);
  i++;
}

let j = 10;
while(j>=2){
  console.log("El valor de j es: " + j);
  j=j-2;
}

3️ Escribe un código en JavaScript que le pregunte a los usuarios cuánto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.

let ans = 0;
while(ans!=4){
  ans = prompt("¿Cuánto es 2 + 2?");
  ans == 4 ? console.log("¡Felicidades!") : console.log("Inténtalo otra vez.");
}


LISTAS

1️ Responde las siguientes preguntas en la sección de comentarios:

¿Qué es un array?
R: Es una colección de objetos (variables).

¿Qué es un objeto?
R: Es una colección donde cada elemento tiene propiedades y valores.

¿Cuándo es mejor usar objetos o arrays?
R: Ninguno es mejor que el otro. Ambos tienen propiedades y utilidades diferentes.

¿Puedo mezclar arrays con objetos o incluso objetos con arrays?
R: Sí. Se pueden crear arreglos de objetos y objetos con elementos cuyos valores sean un arreglo.

2️ Crea una función que pueda recibir cualquier array como parámetro e imprima su primer elemento.

let numbers = ["One","Two","Three"]
var printNumber = (nums) => {
  console.log(nums[0]);
}
printNumber(numbers);

3️ Crea una función que pueda recibir cualquier array como parámetro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).
let numbers = ["One","Two","Three"]
var printNumber = (nums) => {
  for(n of nums){
    console.log(n);
  }
}
printNumber(numbers);


4️ Crea una función que pueda recibir cualquier objeto como parámetro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).

let numbers = {one: 1, two: 2, three: 3};
var printNumber = (nums) => {
  for (let key in nums){
    console.log(nums[key]);
  }
}
printNumber(numbers);


